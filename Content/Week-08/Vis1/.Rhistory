data("midwest", package = "ggplot2")  # load the data
# Or,
#midwest <- read.csv("http://goo.gl/G1K41K") # alt source
# Init Ggplot
ggplot(midwest, aes(x=area, y=poptotal))  # area and poptotal are columns in 'midwest'
library(ggplot2)
data("midwest", package = "ggplot2")
g <- ggplot(midwest, aes(x=area, y=poptotal)) + geom_point() + geom_smooth(method="lm")
g <- ggplot(midwest, aes(x=area, y=poptotal)) + geom_point() + geom_smooth(method="lm")
plot(g)
g + xlim(c(0, 0.1)) + ylim(c(0, 1000000))
g <- ggplot(midwest, aes(x=area, y=poptotal)) + geom_point() + geom_smooth(method="lm")
g1 <- g + coord_cartesian(xlim=c(0,0.1), ylim=c(0, 1000000))
plot(g1)
g <- ggplot(midwest, aes(x=area, y=poptotal)) + geom_point() + geom_smooth(method="lm")
g1 <- g + coord_cartesian(xlim=c(0,0.1), ylim=c(0, 1000000))
g1 + labs(title="Area Vs Population", subtitle="From midwest dataset", y="Population", x="Area", caption="Midwest Demographics")
ggplot(midwest, aes(x=area, y=poptotal)) +
geom_point(col="steelblue", size=.3) +   # Set static color and size for points
geom_smooth(method="lm", col="firebrick") +  # change the color of line
coord_cartesian(xlim=c(0, 0.1), ylim=c(0, 1000000)) +
labs(title="Area Vs Population", subtitle="From midwest dataset", y="Population", x="Area", caption="Midwest Demographics")
gg <- ggplot(midwest, aes(x=area, y=poptotal)) +
geom_point(aes(col=state), size=.3) +  # Set color to vary based on state categories.
geom_smooth(method="lm", col="firebrick", size=.2) +
coord_cartesian(xlim=c(0, 0.1), ylim=c(0, 1000000)) +
labs(title="Area Vs Population", subtitle="From midwest dataset", y="Population", x="Area", caption="Midwest Demographics")
plot(gg)
gg + theme(legend.position="None")  # remove legend
gg + scale_colour_brewer(palette = "Set1")
library(RColorBrewer)
head(brewer.pal.info, 10)
library(ggExtra)
data(mpg, package="ggplot2")
theme_set(theme_bw())
mpg_select <- mpg[mpg$hwy >= 35 & mpg$cty > 27, ]
g <- ggplot(mpg, aes(cty, hwy)) +
geom_count() +
geom_smooth(method="lm", se=F)
ggMarginal(g, type = "histogram", fill="transparent")
ggMarginal(g, type = "boxplot", fill="transparent")
head(mtcars)
p <- ggplot(mtcars, aes(x=wt, y=mpg, color=cyl, size=cyl)) +
geom_point() +
theme(legend.position="none")
p1 <- ggMarginal(p, type="histogram", size=10)
p2 <- ggMarginal(p, type="histogram", fill = "slateblue", xparams = list(  bins=10))
p3 <- ggMarginal(p, margins = 'x', color="purple", size=4)
p1
p2
p3
p2
p2
p1
p2
library(tidyverse)
library(ggalt)
install.packages("ggalt")
library(GGally)
install.packages("GGally")
library(ggridges)
install.packages("ggridges")
library(tidyverse)
library(ggalt)
library(GGally)
library(ggridges)
data_iris <- iris
data_diamonds <- diamonds
data_names <- read.csv("names.csv", header = TRUE)
data_life_exp <- read.csv("life_expectency.csv", header = TRUE)
View(data_iris)
ggplot(data = <DATA>) +
ggplot(data_iris) +
geom_point(aes(x = Sepal.Length , y = Sepal.Width),
color = 'blue', size = 4, pch = 19) +
ggtitle("Basic Scatter Plot", subtitle = "iris") +
xlab("SEPAL LENGTH") +
ylab("SEPAL WIDTH") +
theme_bw() +
theme(axis.text.x = element_text(face = 'bold.italic',
color = 'darkgreen',
size = 10, angle = 0),
axis.text.y = element_text(face = 'bold',
color = 'blue',
size = 10, angle = 45))
ggplot(data_iris) +
geom_point(aes(x = Sepal.Length , y = Sepal.Width,
color = Species, shape = Species), size = 4) +
ggtitle("Scatter Plot with feature differentiation - 1") +
xlab("SEPAL LENGTH") +
ylab("SEPAL WIDTH") +
theme_bw() +
theme(axis.text.x = element_text(face = 'bold.italic',
color = 'darkgreen',
size = 10, angle = 0),
axis.text.y = element_text(face = 'bold',
color = 'blue',
size = 10, angle = 45))
ggplot(data_names) +
geom_line(aes(x = year, y = n,
color = name, lty = name), lwd = 1.25) +
ggtitle("Line Plot with feature differentiation") +
xlab("YEAR") +
ylab("NUMBER") +
theme_bw() +
theme(axis.text.x = element_text(face = 'bold', size = 10),
axis.text.y = element_text(face = 'bold', size = 10))
as.data.frame(table(data_diamonds$cut))
ggplot(as.data.frame(table(data_diamonds$cut))) +
geom_bar(aes(x = Var1, y = Freq, fill = Var1),
stat = 'identity') +
ggtitle("Bar Plot with polar transformation") +
xlab("CUT") +
ylab("COUNT") +
coord_polar("y") +
theme_bw() +
theme(axis.text.x = element_text(face = 'bold', size = 10),
axis.text.y = element_text(face = 'bold', size = 10))
ggplot(data_diamonds) +
geom_density_ridges(aes(x = carat , y = cut,
fill = clarity), alpha = 0.7) +
ggtitle("Ridge Plot") +
xlab("PRICE") +
ylab("CUT") +
theme_bw() +
theme(axis.text.x = element_text(face = 'bold', size = 10),
axis.text.y = element_text(face = 'bold', size = 10))
clear
library(collapsibleTree)
library(collapsibleTree)
install.packages("collapsibleTree")
library(collapsibleTree)
# input data must be a nested data frame:
head(warpbreaks)
# Represent this tree:
p <- collapsibleTree( warpbreaks, c("wool", "tension", "breaks"))
p
# save the widget
# library(htmlwidgets)
# saveWidget(p, file=paste0( getwd(), "/HtmlWidget/dendrogram_interactive.html"))
if (!require(devtools))
install.packages("devtools")
devtools::install_github("rstudio/leaflet")
